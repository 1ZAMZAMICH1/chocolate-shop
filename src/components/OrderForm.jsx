import React, { useState, useCallback } from 'react';
import styled from 'styled-components';
import { getData, updateData } from '../api/gist';
import toast from 'react-hot-toast';
import axios from 'axios'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ axios –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

const OrderForm = ({ product, onOrderSuccess }) => {
  const [formData, setFormData] = useState({
    fio: '',
    phone: '',
    address: '',
    city: '',
    delivery: 'pickup',
    communication: 'whatsapp',
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  // --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í –¢–ï–õ–ï–ì–†–ê–ú ---
  const sendTelegramNotification = async (order) => {
    const token = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const chatId = import.meta.env.VITE_TELEGRAM_CHAT_ID;

    if (!token || !chatId) {
      console.warn("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
      return; // –¢–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –Ω–µ—Ç
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `<b>üî• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n`;
    message += `<b>–¢–æ–≤–∞—Ä:</b> ${order.productName}\n`;
    message += `<b>–¶–µ–Ω–∞:</b> ${order.price} ‚ÇΩ\n\n`;
    message += `<b><u>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:</u></b>\n`;
    message += `<b>–§–ò–û:</b> ${order.customer.fio}\n`;
    message += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${order.customer.phone}</code>\n`;
    message += `<b>–ê–¥—Ä–µ—Å:</b> ${order.customer.city}, ${order.customer.address}\n`;
    message += `<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${order.customer.delivery}\n`;
    message += `<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> ${order.customer.communication}\n`;

    const url = `https://api.telegram.org/bot${token}/sendMessage`;

    try {
      await axios.post(url, {
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML', // –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç.–¥.
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:", error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–ª–µ–º–∞
    }
  };
  // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

  const handleSubmit = useCallback(async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    const loadingToast = toast.loading('–û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...');

    try {
      const currentData = await getData();
      const newOrder = {
        id: `order${Date.now()}`,
        date: new Date().toISOString(),
        productName: product.name,
        price: product.price,
        status: 'new',
        customer: { ...formData },
      };

      const updatedData = {
        ...currentData,
        orders: [newOrder, ...(currentData.orders || [])],
      };

      await updateData(updatedData);

      // --- –í–´–ó–´–í–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –í –¢–ï–õ–ï–ì–†–ê–ú –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
      await sendTelegramNotification(newOrder);

      toast.dismiss(loadingToast);
      onOrderSuccess();
    } catch (err) {
      toast.dismiss(loadingToast);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      setIsSubmitting(false);
    }
  }, [formData, product, onOrderSuccess]);

  return (
    // ... JSX —Ñ–æ—Ä–º—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    <FormContainer onSubmit={handleSubmit}>
      <h3>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h3>
      <ProductInfo>
        –í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ: <strong>{product.name}</strong> ({product.price} ‚ÇΩ)
      </ProductInfo>
      <Input name="fio" placeholder="–§–ò–û" onChange={(e) => setFormData({...formData, fio: e.target.value})} required />
      <Input name="phone" type="tel" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" onChange={(e) => setFormData({...formData, phone: e.target.value})} required />
      <Input name="city" placeholder="–ì–æ—Ä–æ–¥" onChange={(e) => setFormData({...formData, city: e.target.value})} required />
      <Input name="address" placeholder="–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)" onChange={(e) => setFormData({...formData, address: e.target.value})} required />
      <Select name="delivery" onChange={(e) => setFormData({...formData, delivery: e.target.value})} value={formData.delivery}>
        <option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</option>
        <option value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</option>
      </Select>
      <Select name="communication" onChange={(e) => setFormData({...formData, communication: e.target.value})} value={formData.communication}>
        <option value="whatsapp">–°–≤—è–∑–∞—Ç—å—Å—è –≤ WhatsApp</option>
        <option value="telegram">–°–≤—è–∑–∞—Ç—å—Å—è –≤ Telegram</option>
        <option value="phone_call">–ü–æ–∑–≤–æ–Ω–∏—Ç—å</option>
      </Select>
      <SubmitButton type="submit" disabled={isSubmitting}>
        {isSubmitting ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ó–∞–∫–∞–∑–∞—Ç—å'}
      </SubmitButton>
    </FormContainer>
  );
};

export default OrderForm;

// –°—Ç–∏–ª–∏...
const FormContainer = styled.form` /* ... */ `;
const ProductInfo = styled.p` /* ... */ `;
const Input = styled.input` /* ... */ `;
const Select = styled.select` /* ... */ `;
const SubmitButton = styled.button` /* ... */ `;